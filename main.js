require('dotenv').config()
const Telegraf = require('telegraf')
const MongoDbInterface = require('./database/mongoDb')
const Cook = require('./formatting/msgView')

const {TOKEN, USER_DB_URL, URL, PORT, WEBHOOK} = process.env

const bot = new Telegraf(TOKEN)
const db = new MongoDbInterface(USER_DB_URL)


bot.command('start', async (ctx) => {
	const id = ctx.update.message.from.id
	const { first_name, last_name } = ctx.update.message.from
	const name = last_name ? first_name + ' ' + last_name : first_name

	await db.addUser(id, name)

	const parse_mode = 'markdown'
	const reply_markup = JSON.stringify({
		keyboard: [
			[ { text: '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã' }, { text: '–§–∏–ª—å–º—ã' } ],
			[ { text: '–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location: true } ]
		],
		resize_keyboard: true
	})
	ctx.reply('–ü—Ä–∏–≤–µ—Ç –Ω–æ–≤–∏—á–æ–∫! '+ 
		'–ë–æ—Ç *–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏*, ' + 
		'–ø–æ—ç—Ç–æ–º—É –Ω–∏–∫—Ç–æ –∑–¥–µ—Å—å —Å —Ç–æ–±–æ–π —Å—é—Å—é–∫–∞—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç. ' + 
		'–†–∞–∑–±–∏—Ä–∞–π—Å—è —Å —ç—Ç–∏–º –¥–µ—Ä—å–º–æ–º —Å–∞–ºü§®', { parse_mode, reply_markup })
})

bot.on('text', async (ctx) => {
	const id = ctx.message.from.id
	let input = ctx.message.text

	switch (input) {
		case '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã':
			const cinemas = await db.cinemasNearby(id)
			const [ nearest_view, c_keyboards ] = Cook.nearestMsg(cinemas)
			await db.saveInline(c_keyboards)

			ctx.reply(...nearest_view)
			break

		case '–§–∏–ª—å–º—ã':
			const [ most_popular, high_ranking ] = await db.moviesList(id)
			const [ movies_program, m_keyboards ] = Cook.programMsg(most_popular, high_ranking)
			await db.saveInline(m_keyboards)

			ctx.reply(...movies_program)
			break
		
		default:
			if (input[0] === '/') input = +input.slice(1)

			const movie_schema = await db.getMovieData(input)
			if (movie_schema) {
				const preview = Cook.previewMsg(movie_schema)
				ctx.replyWithPhoto(...preview)
				return 
			}

			const cinema_schema = await db.getCinemaData(input)
			if (cinema_schema) {
				const [ cinema_info, cinema_schedule, keyboards ] = Cook.cinemaMsg(cinema_schema)
				await ctx.telegram.sendVenue(id, ...cinema_info)
				await ctx.reply(...cinema_schedule)

				await db.saveInline(keyboards)
				return
			}

			await ctx.reply('–§–∏–ª—å–º/–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ä—å–∫–∏')
	}
})

bot.on('callback_query', async (ctx) => {
	const id = ctx.callbackQuery.from.id	
	let type, doc_name

	type = ctx.callbackQuery.data
		.match(/\(.+\)/)[0]
		.slice(1, -1)

	if (type !== 'null') {
		doc_name = ctx.callbackQuery
			.data
			.match(/\[.+]/)[0]
			.slice(1, -1)
	}
		
	switch (type) {
		
		case 'schedule':
			const cinemas = await db.getSchedule(id, +doc_name)
			const [schedule, keyboards] = Cook.scheduleMsg(cinemas)
			if (keyboards) await db.saveInline(keyboards)

			ctx.reply(...schedule)
			break
		
		case 'trailer':
			const { trailer } = await db.getMovieData(doc_name)
			if (!trailer) {
				await ctx.reply('–£–≤—ã –∏ –∞—Ö. –î–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –Ω–µ –Ω–∞—à–ª–æ—Å—å —Ç—Ä–µ–π–ª–µ—Ä–∞')
			} else {
				trailer[0] === 'video' ? 
					ctx.replyWithVideo(trailer[1], { supports_streaming: true }) :
					ctx.reply(`[–µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —é—Ç—É–ø—á–∏–∫–µ](${trailer[1]})`, { parse_mode: 'markdown' })
			}
			break
		
		case 'cinema':
			const cinema_object = await db.getCinemaData(+doc_name)
			const [ cinema_info, cinema_schedule, cinema_keyboards ] = Cook.cinemaMsg(cinema_object)
			await db.saveInline(cinema_keyboards)

			await ctx.telegram.sendVenue(id, ...cinema_info)
			await ctx.reply(...cinema_schedule)
			break
		
		case 'movie':
			const movie_schema = await db.getMovieData(doc_name)
			const preview = Cook.previewMsg(movie_schema)

			ctx.replyWithPhoto(...preview)
			break

		case 'inline':
			const keyboard = await db.getInline(doc_name)
			const reply_markup = { inline_keyboard: keyboard }
			
			try {
				await ctx.editMessageReplyMarkup(reply_markup)
				await ctx.answerCbQuery(' ')
			} catch (err) {
				await ctx.answerCbQuery('–¢—ã —É–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ')
			}

			break

		default:
			let msg = [
				'–í –≥–ª–∞–∑ —Å–µ–±–µ –ø–æ—Ç—ã–∫–∞–π ‚ù§Ô∏è',
				'—Ç—ã—Ü'
			][ Math.round( Math.random() ) ]

			await ctx.answerCbQuery(msg)

	}
})

bot.on('location', async (ctx) => {
	const id = ctx.update.message.from.id
	const location = ctx.update.message.location

	await db.userData(id, { location })
	if (id == 199941625) ctx.reply('–î–∏–º–∞ - –º—É–¥–æ–∂–æ–ø–∞. –°–æ—Å–Ω–∏ —Ö—É–π—Ü–æ–≤!')

	ctx.reply('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
})


process.on('launch', async () => {
	await db.init()

	let mode
	if (WEBHOOK) {
		mode = {
			webhook: {
				domain: URL,
				hookPath: `/bot${TOKEN}`,
				port: PORT
			}
		}
	} else {
		mode = { polling: {} }
	}

	try {
		bot.launch(mode)
		bot.catch((err) => console.log(err))
	} catch(err) {
		console.log(err)
	}
	
})
process.on('SIGINT', async () => {
	console.log('\nC–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ')
	await db.close()
	process.exit()
})
process.emit('launch')